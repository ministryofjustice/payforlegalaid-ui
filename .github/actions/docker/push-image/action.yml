name: "Build and Push Docker Image"
description: "Build and push a Docker image to a container repository."
inputs:
  registry:
    description: "Docker registry URL"
    required: true
    type: string
  repository:
    description: "Docker repository name"
    required: true
    type: string
  build-number:
    description: "Build number"
    required: true
    type: string
  app-version:
    description: "Application version"
    required: true
    type: string
  image-tag:
    description: "Docker image tag"
    required: true
    type: string
  platforms:
    description: "Target platforms (e.g. linux/amd64,linux/arm64)"
    required: false
    type: string
    default: "linux/amd64"

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if ! [[ "${{ inputs.registry }}" =~ ^[a-zA-Z0-9.-]+$ ]]; then
          echo "::error::Invalid registry format"
          exit 1
        fi

    - name: Install cosign
      run: |
        # Download and install cosign
        curl -sL https://github.com/sigstore/cosign/releases/download/v2.2.0/cosign-linux-amd64 -o /usr/local/bin/cosign
        chmod +x /usr/local/bin/cosign
        cosign version
      shell: bash

    - name: Build and push Docker image
      shell: bash
      env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_INLINE_CACHE: 1
      run: |
          set -e  # Fail the script on any error
          
          docker buildx create --use
          docker buildx inspect --bootstrap
          FULL_SHA=$(git rev-parse HEAD)
          
          docker buildx build . \
            --platform ${{ inputs.platforms }} \
            --build-arg BUILD_NUMBER=${{ inputs.build-number }} \
            --build-arg APP_VERSION=${{ inputs.app-version }} \
            --build-arg GIT_REF=${FULL_SHA} \
            --tag ${{ inputs.registry }}/${{ inputs.repository }}:${{ inputs.image-tag }} \
            --tag ${{ inputs.registry }}/${{ inputs.repository }}:sha-${FULL_SHA} \
            --push \
            --provenance=true \
            --sbom=true
          
          # Generate SLSA predicate
          cosign attest --predicate <(cat <<EOF
          {
            "builder": { "id": "gha://$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" },
            "buildType": "https://github.com/$GITHUB_REPOSITORY",
            "invocation": {
              "configSource": {
                "uri": "git+https://github.com/$GITHUB_REPOSITORY@$GITHUB_REF",
                "digest": { "sha1": "$GITHUB_SHA" }
              }
            }
          }
          EOF
          ) ${{ inputs.registry }}/${{ inputs.repository }}:sha-${FULL_SHA}
        
          echo "Successfully pushed Docker image to ${{ inputs.registry }}/${{ inputs.repository }}:${{ inputs.image-tag }}"
